package com.mainpack;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
	
	public static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> arrL = Arrays.asList(1,2,3,4,10,5,5,6);
		
		int findmaxSum = maxSum(arrL);
         
		int n = scn.nextInt();
		
		if(n<0) {
			System.out.println("Invalid size");
			return;
		}
		
		int [] arr = new int[n];
		
		for(int i=0;i<arr.length;i++) {
			int ele = scn.nextInt();
			if(ele < 0) {
				System.out.println("Invalid integer");
				return;
			}
			arr[i] = ele;
		}
		
		int findmSum = maxSumArray(arr);
		
		
		System.out.println("1: " + findmaxSum);
		System.out.println("2: " + findmSum);
		
	System.out.println("Power of 2");
	 System.out.println(powerUsingRecursion(2,51));
	 System.out.println(powerOfTwo(100000));
	}
	
	public static int maxSum(List<Integer> arr){
		
		int oddSum = 0;
		int evenSum = 0;
		
		for(int i=0;i<arr.size();i++) {
			if(i % 2 != 0) oddSum += arr.get(i);
			else evenSum += arr.get(i); 
		}
		
		return Math.max(oddSum, evenSum);
	}

     public static int maxSumArray(int[] arr){
		
		int oddSum = 0;
		int evenSum = 0;
		
		for(int i=0;i<arr.length;i++) {
			if(i % 2 != 0) oddSum += arr[i];
			else evenSum += arr[i]; 
		}
		
		return Math.max(oddSum, evenSum);
	}
     
     public static long powerUsingRecursion(int n , int p) {
    	 
    	 if(p==0) return 1;
    	 
    	 long ans1 = powerUsingRecursion(n, p>>1);
    	 
    	 if(p % 2 == 0) return ans1*ans1;
    	 
    	 return ans1 *ans1 *n;
     }
     
     public static long powerOfTwo(int p) {
    	 
    	 return  (long) Math.pow(2, p);
     }
     
}
